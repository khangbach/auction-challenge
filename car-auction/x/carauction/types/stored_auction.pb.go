// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carauction/carauction/stored_auction.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoredAuction struct {
	Index      string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Duration   uint64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	MinimumBid uint64 `protobuf:"varint,3,opt,name=minimumBid,proto3" json:"minimumBid,omitempty"`
	StartTime  uint64 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	MaxBid     uint64 `protobuf:"varint,5,opt,name=maxBid,proto3" json:"maxBid,omitempty"`
	Winner     string `protobuf:"bytes,6,opt,name=winner,proto3" json:"winner,omitempty"`
	Creator    string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	IsEnd      bool   `protobuf:"varint,8,opt,name=isEnd,proto3" json:"isEnd,omitempty"`
}

func (m *StoredAuction) Reset()         { *m = StoredAuction{} }
func (m *StoredAuction) String() string { return proto.CompactTextString(m) }
func (*StoredAuction) ProtoMessage()    {}
func (*StoredAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5e24db4245b39af, []int{0}
}
func (m *StoredAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredAuction.Merge(m, src)
}
func (m *StoredAuction) XXX_Size() int {
	return m.Size()
}
func (m *StoredAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredAuction.DiscardUnknown(m)
}

var xxx_messageInfo_StoredAuction proto.InternalMessageInfo

func (m *StoredAuction) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StoredAuction) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *StoredAuction) GetMinimumBid() uint64 {
	if m != nil {
		return m.MinimumBid
	}
	return 0
}

func (m *StoredAuction) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *StoredAuction) GetMaxBid() uint64 {
	if m != nil {
		return m.MaxBid
	}
	return 0
}

func (m *StoredAuction) GetWinner() string {
	if m != nil {
		return m.Winner
	}
	return ""
}

func (m *StoredAuction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *StoredAuction) GetIsEnd() bool {
	if m != nil {
		return m.IsEnd
	}
	return false
}

func init() {
	proto.RegisterType((*StoredAuction)(nil), "carauction.carauction.StoredAuction")
}

func init() {
	proto.RegisterFile("carauction/carauction/stored_auction.proto", fileDescriptor_a5e24db4245b39af)
}

var fileDescriptor_a5e24db4245b39af = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x18, 0x84, 0x1b, 0xdd, 0xed, 0x76, 0x7f, 0xf0, 0x12, 0x54, 0x82, 0x48, 0x28, 0x9e, 0x8a, 0xe0,
	0x7a, 0xf0, 0xe2, 0xd5, 0x05, 0x5f, 0xa0, 0x7a, 0xf2, 0x22, 0xb1, 0xc9, 0x21, 0x87, 0x24, 0xcb,
	0x9f, 0x14, 0xeb, 0x5b, 0xf8, 0x58, 0x1e, 0xf7, 0xe8, 0x4d, 0x69, 0x5f, 0x44, 0x9a, 0x76, 0x6d,
	0x6f, 0xff, 0x37, 0x33, 0x3f, 0x0c, 0x03, 0xd7, 0x95, 0x40, 0x51, 0x57, 0x41, 0x3b, 0x7b, 0x3b,
	0x3b, 0x7d, 0x70, 0xa8, 0xe4, 0xeb, 0x88, 0x9b, 0x1d, 0xba, 0xe0, 0xe8, 0xd9, 0x14, 0xd8, 0x4c,
	0xe7, 0xd5, 0x0f, 0x81, 0x93, 0xa7, 0x98, 0x7f, 0x18, 0x14, 0x7a, 0x0a, 0x4b, 0x6d, 0xa5, 0x6a,
	0x18, 0xc9, 0x49, 0xb1, 0x2e, 0x07, 0xa0, 0x17, 0x90, 0xc9, 0x1a, 0x45, 0x9f, 0x60, 0x47, 0x39,
	0x29, 0x16, 0xe5, 0x3f, 0x53, 0x0e, 0x60, 0xb4, 0xd5, 0xa6, 0x36, 0x5b, 0x2d, 0xd9, 0x71, 0x74,
	0x67, 0x0a, 0xbd, 0x84, 0xb5, 0x0f, 0x02, 0xc3, 0xb3, 0x36, 0x8a, 0x2d, 0xa2, 0x3d, 0x09, 0xf4,
	0x1c, 0x52, 0x23, 0x9a, 0xfe, 0x73, 0x19, 0xad, 0x91, 0x7a, 0xfd, 0x5d, 0x5b, 0xab, 0x90, 0xa5,
	0xb1, 0xc8, 0x48, 0x94, 0xc1, 0xaa, 0x42, 0x25, 0x82, 0x43, 0xb6, 0x8a, 0xc6, 0x01, 0x63, 0x73,
	0xff, 0x68, 0x25, 0xcb, 0x72, 0x52, 0x64, 0xe5, 0x00, 0xdb, 0xfb, 0xaf, 0x96, 0x93, 0x7d, 0xcb,
	0xc9, 0x6f, 0xcb, 0xc9, 0x67, 0xc7, 0x93, 0x7d, 0xc7, 0x93, 0xef, 0x8e, 0x27, 0x2f, 0xbc, 0x12,
	0x78, 0x73, 0x18, 0xad, 0x99, 0x2f, 0x18, 0x3e, 0x76, 0xca, 0xbf, 0xa5, 0x71, 0xb9, 0xbb, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0xce, 0x6d, 0x04, 0x67, 0x01, 0x00, 0x00,
}

func (m *StoredAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnd {
		i--
		if m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintStoredAuction(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Winner) > 0 {
		i -= len(m.Winner)
		copy(dAtA[i:], m.Winner)
		i = encodeVarintStoredAuction(dAtA, i, uint64(len(m.Winner)))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxBid != 0 {
		i = encodeVarintStoredAuction(dAtA, i, uint64(m.MaxBid))
		i--
		dAtA[i] = 0x28
	}
	if m.StartTime != 0 {
		i = encodeVarintStoredAuction(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x20
	}
	if m.MinimumBid != 0 {
		i = encodeVarintStoredAuction(dAtA, i, uint64(m.MinimumBid))
		i--
		dAtA[i] = 0x18
	}
	if m.Duration != 0 {
		i = encodeVarintStoredAuction(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStoredAuction(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStoredAuction(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovStoredAuction(uint64(m.Duration))
	}
	if m.MinimumBid != 0 {
		n += 1 + sovStoredAuction(uint64(m.MinimumBid))
	}
	if m.StartTime != 0 {
		n += 1 + sovStoredAuction(uint64(m.StartTime))
	}
	if m.MaxBid != 0 {
		n += 1 + sovStoredAuction(uint64(m.MaxBid))
	}
	l = len(m.Winner)
	if l > 0 {
		n += 1 + l + sovStoredAuction(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovStoredAuction(uint64(l))
	}
	if m.IsEnd {
		n += 2
	}
	return n
}

func sovStoredAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredAuction(x uint64) (n int) {
	return sovStoredAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBid", wireType)
			}
			m.MinimumBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBid", wireType)
			}
			m.MaxBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStoredAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredAuction = fmt.Errorf("proto: unexpected end of group")
)
