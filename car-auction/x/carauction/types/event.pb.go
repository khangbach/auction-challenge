// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: carauction/carauction/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuctionCreated struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MinimumBid uint64 `protobuf:"varint,2,opt,name=minimumBid,proto3" json:"minimumBid,omitempty"`
	Duration   uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *AuctionCreated) Reset()         { *m = AuctionCreated{} }
func (m *AuctionCreated) String() string { return proto.CompactTextString(m) }
func (*AuctionCreated) ProtoMessage()    {}
func (*AuctionCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d27e9edd08d19cd7, []int{0}
}
func (m *AuctionCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionCreated.Merge(m, src)
}
func (m *AuctionCreated) XXX_Size() int {
	return m.Size()
}
func (m *AuctionCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionCreated.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionCreated proto.InternalMessageInfo

func (m *AuctionCreated) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *AuctionCreated) GetMinimumBid() uint64 {
	if m != nil {
		return m.MinimumBid
	}
	return 0
}

func (m *AuctionCreated) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type BidCreated struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AuctionIndex string `protobuf:"bytes,2,opt,name=auctionIndex,proto3" json:"auctionIndex,omitempty"`
	BidAmount    uint64 `protobuf:"varint,3,opt,name=bidAmount,proto3" json:"bidAmount,omitempty"`
}

func (m *BidCreated) Reset()         { *m = BidCreated{} }
func (m *BidCreated) String() string { return proto.CompactTextString(m) }
func (*BidCreated) ProtoMessage()    {}
func (*BidCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d27e9edd08d19cd7, []int{1}
}
func (m *BidCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidCreated.Merge(m, src)
}
func (m *BidCreated) XXX_Size() int {
	return m.Size()
}
func (m *BidCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_BidCreated.DiscardUnknown(m)
}

var xxx_messageInfo_BidCreated proto.InternalMessageInfo

func (m *BidCreated) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *BidCreated) GetAuctionIndex() string {
	if m != nil {
		return m.AuctionIndex
	}
	return ""
}

func (m *BidCreated) GetBidAmount() uint64 {
	if m != nil {
		return m.BidAmount
	}
	return 0
}

type EndAuction struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AuctionIndex string `protobuf:"bytes,2,opt,name=auctionIndex,proto3" json:"auctionIndex,omitempty"`
	BidAmount    uint64 `protobuf:"varint,3,opt,name=bidAmount,proto3" json:"bidAmount,omitempty"`
	Winner       string `protobuf:"bytes,5,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (m *EndAuction) Reset()         { *m = EndAuction{} }
func (m *EndAuction) String() string { return proto.CompactTextString(m) }
func (*EndAuction) ProtoMessage()    {}
func (*EndAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d27e9edd08d19cd7, []int{2}
}
func (m *EndAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndAuction.Merge(m, src)
}
func (m *EndAuction) XXX_Size() int {
	return m.Size()
}
func (m *EndAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_EndAuction.DiscardUnknown(m)
}

var xxx_messageInfo_EndAuction proto.InternalMessageInfo

func (m *EndAuction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EndAuction) GetAuctionIndex() string {
	if m != nil {
		return m.AuctionIndex
	}
	return ""
}

func (m *EndAuction) GetBidAmount() uint64 {
	if m != nil {
		return m.BidAmount
	}
	return 0
}

func (m *EndAuction) GetWinner() string {
	if m != nil {
		return m.Winner
	}
	return ""
}

type CancelBid struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AuctionIndex string `protobuf:"bytes,2,opt,name=auctionIndex,proto3" json:"auctionIndex,omitempty"`
	BidIndex     string `protobuf:"bytes,3,opt,name=bidIndex,proto3" json:"bidIndex,omitempty"`
}

func (m *CancelBid) Reset()         { *m = CancelBid{} }
func (m *CancelBid) String() string { return proto.CompactTextString(m) }
func (*CancelBid) ProtoMessage()    {}
func (*CancelBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_d27e9edd08d19cd7, []int{3}
}
func (m *CancelBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelBid.Merge(m, src)
}
func (m *CancelBid) XXX_Size() int {
	return m.Size()
}
func (m *CancelBid) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelBid.DiscardUnknown(m)
}

var xxx_messageInfo_CancelBid proto.InternalMessageInfo

func (m *CancelBid) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CancelBid) GetAuctionIndex() string {
	if m != nil {
		return m.AuctionIndex
	}
	return ""
}

func (m *CancelBid) GetBidIndex() string {
	if m != nil {
		return m.BidIndex
	}
	return ""
}

func init() {
	proto.RegisterType((*AuctionCreated)(nil), "carauction.carauction.AuctionCreated")
	proto.RegisterType((*BidCreated)(nil), "carauction.carauction.BidCreated")
	proto.RegisterType((*EndAuction)(nil), "carauction.carauction.EndAuction")
	proto.RegisterType((*CancelBid)(nil), "carauction.carauction.CancelBid")
}

func init() { proto.RegisterFile("carauction/carauction/event.proto", fileDescriptor_d27e9edd08d19cd7) }

var fileDescriptor_d27e9edd08d19cd7 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xbf, 0x4e, 0xf3, 0x30,
	0x10, 0xaf, 0xbf, 0x7e, 0x94, 0xe6, 0x84, 0x18, 0x2c, 0x40, 0x21, 0x42, 0x56, 0xc9, 0xd4, 0x85,
	0x76, 0x60, 0x61, 0x6d, 0x2b, 0x06, 0xd6, 0x8c, 0x2c, 0xc8, 0xb1, 0x4d, 0xb1, 0x44, 0xec, 0xca,
	0x71, 0xa0, 0x6c, 0x3c, 0x02, 0x8f, 0xc5, 0xd8, 0x91, 0x11, 0x25, 0x2f, 0x82, 0x62, 0xa7, 0x4d,
	0x98, 0x18, 0x10, 0xdb, 0xef, 0xcf, 0x9d, 0x7f, 0x3e, 0xfb, 0xe0, 0x9c, 0x51, 0x43, 0x0b, 0x66,
	0xa5, 0x56, 0xd3, 0x0e, 0x14, 0x4f, 0x42, 0xd9, 0xc9, 0xca, 0x68, 0xab, 0xf1, 0x71, 0xab, 0x4f,
	0x5a, 0x18, 0x1d, 0x2d, 0xf5, 0x52, 0xbb, 0x8a, 0x69, 0x8d, 0x7c, 0x71, 0x74, 0xca, 0x74, 0x9e,
	0xe9, 0xfc, 0xce, 0x1b, 0x9e, 0x78, 0x2b, 0xbe, 0x87, 0xc3, 0x99, 0xef, 0x5d, 0x18, 0x41, 0xad,
	0xe0, 0x38, 0x84, 0x7d, 0x56, 0x43, 0x6d, 0x42, 0x34, 0x42, 0xe3, 0x20, 0xd9, 0x52, 0x4c, 0x00,
	0x32, 0xa9, 0x64, 0x56, 0x64, 0x73, 0xc9, 0xc3, 0x7f, 0x23, 0x34, 0xfe, 0x9f, 0x74, 0x14, 0x1c,
	0xc1, 0x90, 0x17, 0x86, 0xd6, 0x87, 0x85, 0x7d, 0xe7, 0xee, 0x78, 0xfc, 0x00, 0x30, 0x97, 0xfc,
	0xe7, 0x8c, 0x18, 0x0e, 0x9a, 0x59, 0x6e, 0x14, 0x17, 0x6b, 0x97, 0x12, 0x24, 0xdf, 0x34, 0x7c,
	0x06, 0x41, 0x2a, 0xf9, 0x2c, 0xd3, 0x85, 0xb2, 0x4d, 0x50, 0x2b, 0xc4, 0xaf, 0x08, 0xe0, 0x5a,
	0xf1, 0x66, 0xaa, 0xbf, 0x8c, 0xc2, 0x27, 0x30, 0x78, 0x96, 0x4a, 0x09, 0x13, 0xee, 0xb9, 0xde,
	0x86, 0xc5, 0x02, 0x82, 0x05, 0x55, 0x4c, 0x3c, 0xd6, 0xaf, 0xf2, 0xbb, 0x0b, 0x44, 0x30, 0x4c,
	0x25, 0xf7, 0x7e, 0xdf, 0xf9, 0x3b, 0x3e, 0xbf, 0x7a, 0x2f, 0x09, 0xda, 0x94, 0x04, 0x7d, 0x96,
	0x04, 0xbd, 0x55, 0xa4, 0xb7, 0xa9, 0x48, 0xef, 0xa3, 0x22, 0xbd, 0x5b, 0xc2, 0xa8, 0xb9, 0xd8,
	0xae, 0xcd, 0xba, 0xbb, 0x43, 0xf6, 0x65, 0x25, 0xf2, 0x74, 0xe0, 0x3e, 0xff, 0xf2, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0xaa, 0xb7, 0x72, 0xf3, 0x69, 0x02, 0x00, 0x00,
}

func (m *AuctionCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.MinimumBid != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.MinimumBid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BidCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidAmount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BidAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AuctionIndex) > 0 {
		i -= len(m.AuctionIndex)
		copy(dAtA[i:], m.AuctionIndex)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.AuctionIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Winner) > 0 {
		i -= len(m.Winner)
		copy(dAtA[i:], m.Winner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Winner)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BidAmount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BidAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AuctionIndex) > 0 {
		i -= len(m.AuctionIndex)
		copy(dAtA[i:], m.AuctionIndex)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.AuctionIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidIndex) > 0 {
		i -= len(m.BidIndex)
		copy(dAtA[i:], m.BidIndex)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BidIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuctionIndex) > 0 {
		i -= len(m.AuctionIndex)
		copy(dAtA[i:], m.AuctionIndex)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.AuctionIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuctionCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.MinimumBid != 0 {
		n += 1 + sovEvent(uint64(m.MinimumBid))
	}
	if m.Duration != 0 {
		n += 1 + sovEvent(uint64(m.Duration))
	}
	return n
}

func (m *BidCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.AuctionIndex)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.BidAmount != 0 {
		n += 1 + sovEvent(uint64(m.BidAmount))
	}
	return n
}

func (m *EndAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.AuctionIndex)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.BidAmount != 0 {
		n += 1 + sovEvent(uint64(m.BidAmount))
	}
	l = len(m.Winner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *CancelBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.AuctionIndex)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.BidIndex)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuctionCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumBid", wireType)
			}
			m.MinimumBid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumBid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidAmount", wireType)
			}
			m.BidAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidAmount", wireType)
			}
			m.BidAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
